// Code generated by MockGen. DO NOT EDIT.
// Source: ../slackExt/queries.go

// Package mock_slackExt is a generated GoMock package.
package mock_slackExt

import (
	context "context"
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockQueries is a mock of Queries interface.
type MockQueries struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesMockRecorder
}

// MockQueriesMockRecorder is the mock recorder for MockQueries.
type MockQueriesMockRecorder struct {
	mock *MockQueries
}

// NewMockQueries creates a new mock instance.
func NewMockQueries(ctrl *gomock.Controller) *MockQueries {
	mock := &MockQueries{ctrl: ctrl}
	mock.recorder = &MockQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueries) EXPECT() *MockQueriesMockRecorder {
	return m.recorder
}

// FindUserGroupByField mocks base method.
func (m *MockQueries) FindUserGroupByField(ctx context.Context, field, value string, includeDisabled bool) (slack.UserGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserGroupByField", ctx, field, value, includeDisabled)
	ret0, _ := ret[0].(slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserGroupByField indicates an expected call of FindUserGroupByField.
func (mr *MockQueriesMockRecorder) FindUserGroupByField(ctx, field, value, includeDisabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserGroupByField", reflect.TypeOf((*MockQueries)(nil).FindUserGroupByField), ctx, field, value, includeDisabled)
}
